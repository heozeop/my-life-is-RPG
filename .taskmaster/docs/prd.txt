# LifeMeter RPG – API Key per User 기반 PRD

---

<context>

## Overview
LifeMeter RPG는 **인생 계획 관리**와 **RPG 게이미피케이션**을 결합한 서비스입니다.
사용자는 자신의 목표(10년/1년/월/주)를 **퀘스트**처럼 등록하고, 이를 완료하면서 **경험치·아이템·레벨**을 얻어 캐릭터를 성장시킬 수 있습니다.

이 PRD는 **멀티 유저 환경**에서 각 사용자가 고유한 API Key를 발급받아 인증하는 방식을 중심으로 설계합니다.
즉, 사용자별로 안전하게 계정을 구분하면서도, JWT 등 복잡한 세션 관리를 생략하고 단순 키 기반 인증으로 동작하는 구조입니다.

**문제 해결:**
- 목표/계획 관리가 지루하다 → 게임처럼 재미있게 관리 가능
- 기존 인증(JWT, OAuth)이 과도하게 복잡하다 → API Key per User로 단순화

**대상 사용자:**
- 자기계발, 습관 형성, 공부/운동 목표를 관리하고 싶은 개인 사용자
- “인생 % 카운터 + RPG”라는 철학적/놀이적 요소에 매력을 느끼는 게이머 감성의 생산성 툴 유저

**가치:**
- 장기·단기 목표를 체계적으로 관리
- 목표 달성을 재미 요소와 결합 → 몰입감 상승
- 간단한 인증으로 멀티유저 지원 가능

---

## Core Features

### 1. 사용자 계정 & API Key 발급
- **기능:** 회원가입 시 고유 API Key 자동 발급 → `X-API-KEY`로 인증
- **중요성:** 멀티유저 환경 지원, 데이터 분리 및 보안
- **동작:** `users` 테이블에 `username`, `password_hash`, `api_key` 저장

### 2. 캐릭터 생성 & 성장
- **기능:** 각 유저는 1개 이상의 캐릭터를 만들고, 경험치·레벨·스탯 관리
- **중요성:** 목표 달성 경험을 시각화, 게이미피케이션의 핵심
- **동작:** 퀘스트 완료 시 EXP/코인 지급 → 캐릭터 레벨업

### 3. 목표 = 퀘스트 시스템
- **기능:** 연/월/주 단위 목표를 퀘스트로 등록, 완료 시 보상 지급
- **중요성:** 사용자의 실제 인생 계획을 “게임 퀘스트”로 전환
- **동작:** `QuestType.YEARLY`, `MONTHLY`, `WEEKLY` 구분 → 완료 시 기록 저장

### 4. 아이템/인벤토리 & 장비 시스템
- **기능:** 가챠/보상으로 아이템 획득 → 장비 장착 시 캐릭터 능력치 상승
- **중요성:** 반복 참여 동기 부여
- **동작:** `Items` 테이블과 `Inventories` 관계, `equippedSlot` 상태 관리

### 5. 운세/버프 시스템
- **기능:** 매일 로그인 시 “오늘의 운세”와 버프 제공 (EXP 배율, 드랍률, 스탯 강화)
- **중요성:** 접속 동기 부여, 철학적 재미 요소
- **동작:** 날짜+UserID 기반 시드로 고정 메시지/버프 생성

### 6. 인생 타임라인 (Stage Map)
- **기능:** 10년 단위 “챕터”를 월드맵처럼 시각화, 현재 나이 표시
- **중요성:** 장기 목표 관리 + 철학적 요소 강조
- **동작:** `Stages` 테이블에서 나이 범위별 스토리 정의

---

## User Experience

### Personas
1. **자기계발형 유저**: 목표 관리 도구를 찾는 직장인/학생
2. **게이미피케이션 선호 유저**: RPG 요소를 즐기며 동기 부여 필요
3. **가볍게 체험하는 유저**: 운세·인생 % 카운터 등 가벼운 철학적 재미를 소비

### User Flow
- **회원가입 → API Key 발급 → 캐릭터 생성 → 목표 등록(퀘스트) → 완료 체크 → 보상 획득 → 레벨업/아이템 장착 → 운세 확인 → 장기 타임라인 탐험**

### UI/UX 고려
- 대시보드: 캐릭터 현황 + 이번 주 퀘스트 + 오늘의 운세 한눈에
- 퀘스트 보드: “To Do → Completed” Kanban 스타일
- RPG 요소: 레벨 ProgressBar, 장비 아이콘, 월드맵 시각화

</context>

---

<PRD>

## Technical Architecture

### System Components
- **Spring Boot (Kotlin)** REST API
- **Exposed ORM** + **MySQL Free Tier** (PlanetScale/OCI/AWS)
- **API Key per User Filter** (헤더 검사)
- **Tables**: Users, Characters, Items, Inventories, Quests, CompletedQuests, DailyBuffs, Stages

### Data Models
- Users: username, password_hash, api_key
- Characters: 레벨, EXP, 능력치
- Items/Inventories: 아이템 정보, 장착 여부
- Quests: 목표(연/월/주), 보상, 완료 여부
- DailyBuffs: 운세 버프
- Stages: 10년 단위 인생 챕터

### APIs
- `/auth/register`, `/auth/login` (API Key 발급/조회)
- `/api/characters` CRUD
- `/api/quests` CRUD + 완료 처리
- `/api/items/gacha`, `/api/items/equip`
- `/api/fortune/today`

### Infrastructure
- MySQL Free Tier DB
- 1대 인스턴스 (OCI/AWS free tier)
- HikariCP poolSize ≤ 5 (무료 Tier 제한 대응)

---

## Development Roadmap

### Phase 1: MVP
- Users 테이블 + API Key 인증
- 캐릭터 CRUD + EXP/레벨업
- 퀘스트 CRUD + 완료 처리 (경험치 반영)
- 운세/버프 API

### Phase 2: RPG 확장
- 가챠 아이템 시스템
- 인벤토리/장비 장착
- 경험치 배율 버프 적용

### Phase 3: 시각화 & 철학적 요소
- 인생 % 카운터 API
- Stage 월드맵 (10년 단위 챕터)
- UI: 대시보드 (캐릭터 + 퀘스트 + 운세)

### Phase 4: 커뮤니티/소셜
- 친구 추가, 서로의 캐릭터 보기
- 주간 랭킹 (누적 EXP, 완료 퀘스트 수)

---

## Logical Dependency Chain
1. **인증(API Key)** → 멀티유저 구분 필수
2. 캐릭터 CRUD + EXP 시스템 → 최소한의 RPG 골격
3. 퀘스트 CRUD + 완료 처리 → 목표 관리 핵심
4. 운세 시스템 → 접속 재미 요소
5. 아이템/인벤토리 → 성장 요소
6. 타임라인 시각화 → 철학적 감각 강화
7. 소셜 기능 → 장기 확장

---

## Risks and Mitigations
- **기술적 과제:** API Key 보안 → 키 재발급/폐기 기능 제공
- **MVP 범위 정의:** 캐릭터+퀘스트+API Key 인증만 먼저 → 점진 확장
- **리소스 제약:** Free Tier 커넥션 한계 → Hikari pool 최소화, 캐시 적극 활용

---

## Appendix
- **참고:** PlanetScale은 FK 제약 미지원 → Exposed FK는 컬럼 레벨만 사용
- **확장:** JWT/OAuth로 교체 가능
- **시각화:** React/Next.js 프론트엔드로 RPG 대시보드 UI 구현

</PRD>
